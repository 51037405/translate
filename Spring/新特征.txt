3、Spring4.0 的新特征和增强
Spring框架在2004年首次发布,之后有几个主要的大版本:Spring 2.0 XML名称空间和AspectJ提供支持;Spring 2.5支持注解驱动配置;Spring 3.0引入了一个强大的Java 5 +基础框架代码库和特性,比如Java的@Configuration模型。
4.0版本是最近的一个主要版本，是第一次完全支持Java8的特征。当然你还是可以用旧版本的Java来运行Spring，但是，我们已经把最低的要求提升到了JavaSE 6，我们也趁着这个主要版本的机会，删除了一些废弃的类和方法。
升级到Spring4.0的迁移手册，在 Spring Framework GitHub Wiki。
3.1、提升了“入门”的体验
新的spring.io网站提供了一整套的“入门”手册以帮助学习Spring。在第一章，Spring入门中有更多的介绍。新网站还提供了关于Spring下面额外项目的全面的概述。
Spring现在在每个RELEASE版本中都会发布一个POM文件清单BOM（bill of materials）,如果你是个Maven用户可能会对此比较感兴趣。
3.2 删除废弃的包和方法
在Spring4.0删除了所有废弃的包和一些废弃的类和方法。升级前请确保对旧API的依赖都已经修改过来了。
完整的差异报告，请查看API差异报告。
注意，依赖的第三方插件的版本已经提升到到了2010/2011期间的最低版本（例如：Spring4一般只支持2010年末以后的版本）：尤其是：Hibernate 3.6+, EhCache 2.1+, Quartz 1.8+, Groovy 1.8+, and Joda-Time 2.0+。有个例外的情况，Spring4 要求 Hibernate Validator 4.3+，Jackson 2.0+（Spring3.2 仍保留对 Jackson 1.8/1.9的支持。现在只是废弃的形式）。
3.3 Java8以及6和7
Spring4 支持Java8的一些特征。使用lambda表达式和方法引用Spring的回调接口。完美的支持java.time (JSR-310)，以及使用 @Repeatable 重写了一些注解。可以使用Java8的 parameter name discovery 机制（基于 -parameters 编译标识）。
Spring仍兼容旧版本的Java JDK:具体地说,Java SE 6(具体来说,最低级别相当于JDK 6更新18日发布2010年1月)及以上仍完全支持。然而,对于基于Spring4刚开始发开的项目,我们建议使用Java 7或8。
3,4 JavaEE6和7
JavaEE6以及以上被认为是Spring4的基线，对JAP2.0 和Servlet3.0规范有特殊的意义。为了兼容Google App Engine 和旧版本的应用服务器，可以将Spring4的应用部署到Servlet2.5的环境，但是Servlet3.0+的环境是Spring test和mock包测试步骤的先决条件。
如果你是一个WebSphere 7用户,一定要安装JPA 2.0 feature pack。在WebLogic 10.3.4或更高版本,安装的JPA 2.0补丁。这就是可以变成Spring4的部署环境。
更有远见的是Spring4支持JavaEE7级别的适用性规范：尤其是，JMS 2.0, JTA 1.2, JPA 2.1, Bean Validation 1.1, and JSR-236 Concurrency Utilities，像往常一样,这种支持侧重于个人使用的规范,如在Tomcat或在独立的环境中。然而,它可以同样地工作当一个Spring应用程序部署到Java EE 7服务器。
注意,Hibernate 4.3是一个JPA 2.1提供者,因此仅支持4.0的Spring框架。这同样适用于Hibernate Validator 5.0作为Bean Validation 1.1提供者。Spring Framework 3.2是都不支持的。
3.5 Groovy Bean Definition DSL
Spring4.0 开始，可以用Groovy DSL定义外部bean的配置，比XML定义bean更简洁。使用Groovy还允许您轻松地将bean定义直接嵌入你的启动代码。例如:
def reader = new GroovyBeanDefinitionReader(myApplicationContext)
reader.beans {
    dataSource(BasicDataSource) {
        driverClassName = "org.hsqldb.jdbcDriver"
        url = "jdbc:hsqldb:mem:grailsDB"
        username = "sa"
        password = ""
        settings = [mynew:"setting"]
    }
    sessionFactory(SessionFactory) {
        dataSource = dataSource
    }
    myService(MyService) {
        nestedBean = { AnotherBean bean ->
            dataSource = dataSource
        }
    }
}
更多的信息请查阅GroovyBeanDefinitionReader javadocs。
3.6 核心容器的改进
核心容器的综合改进如下：
Spring现在把泛型作为注入Bean的限定符。例如：当使用Spring 数据 Repository时，你可以注入具体的实现：@Autowired Repository<Customer> customerRepository。
如果你使用Spring的元注解支持，你现在可以开发自定义注解来公开源注解的特定属性。
当自动装配到lists和arrays时，Beans现在可以被 排序 了。支持@Order注解和Ordered接口两种方式。
@Lazy注解现在可以用在注入点以及@Bean定义上。
引入@Description注解,开发人员可以使用基于Java方式的配置。
根据条件筛选Beans的广义模型通过@Conditional注解加入。这和@Profile支持的类似，但是允许以编程式开发用户定义的策略。
基于CGLIB的代理类不在需要默认的构造方法。这个支持是由 objenesis库提供。这个库重新打包到Spring框架中，作为Spring框架的一部分发布。通过这个策略，针对代理实例被调用没有构造可言了。
框架现在支持管理时区。例如LocaleContext。
3.7 Web改进
现在仍然可以部署到Servlet 2.5服务器，但是Spring4.0现在主要集中在Servlet 3.0+环境。如果你使用Spring MVC测试框架，你需要将Servlet 3.0兼容的JAR包放到 测试的classpath下。
除了稍后会提到的WebSocket支持外，下面的常规改进已经加入到Spring的Web模块：
你可以在Spring MVC应用中使用新的@RestController注解，不在需要给@RequestMapping的方法添加@ResponseBody注解。
AsyncRestTemplate类已被添加进来，当开发REST客户端时，允许非阻塞异步支持。
当开发Spring MVC应用时，Spring现在提供了全面的时区支持 。
3.8 WebSocket、SockJS和STOMP消息
一个新的spring-websocket模块提供了全面的基于WebSocket和在Web应用的客户端和服务器之间双向通信的支持。它和Java WebSocket API JSR-356兼容，此外还提供了当浏览器不支持WebSocket协议时的基于SockJS的备用选项。
一个新的spring-messaging模块添加了支持STOMP作为WebSocket子协议用于在应用中使用注解编程模型路由和处理从WebSocket客户端发送的STOMP消息。由于@Controller现在可以同时包含@RequestMapping和@MessageMapping方法用于处理HTTP请求和来自WebSocket连接客户端发送的消息。新的spring-messaging模块还包含了来自以前Spring集成项目的关键抽象，例如Message、MessageChannel、MessageHandler和其他作为基于消息传递的应用程序的基础。
欲知详情以及较全面的介绍，请参见Chapter 20, WebSocket 支持一节。
3.9 测试改进
除了精简spring-test模块中过时的代码外，Spring4还引入了几个用于单元测试和集成测试的新功能。
几乎spring-test模块中所有的注解（例如：@ContextConfiguration、@WebAppConfiguration、@ContextHierarchy、@ActiveProfiles等等)现在可以用作元注解来创建自定义的composed annotations并且可以减少测试套件的配置。
现在可以以编程方式解决Bean定义配置文件的激活。只需要实现一个自定义的ActiveProfilesResolver，并且通过@ActiveProfiles的resolver属性注册。
新的SocketUtils类被引入到了spring-core模块。这个类可以使你能够扫描本地主机的空闲的TCP和UDP服务端口。这个功能不是专门用在测试的，但是可以证明在你使用Socket写集成测试的时候非常有用。例如测试内存中启动的SMTP服务器，FTP服务器，Servlet容器等。
从Spring 4.0开始,org.springframework.mock.web包中的一套mock是基于Servlet 3.0 API。此外，一些Servlet API mocks（例如：MockHttpServletRequest、MockServletContext等等）已经有一些小的改进更新，提高了可配置性。
4、Spring 4.1增强和新功能
4.1 JMS改进
Spring 4.1引入了一个更简单的基础架构，使用 @JmsListener注解bean方法来注册JMS监听端点。XML命名空间已经通过增强来支持这种新的方式（jms:annotation-driven），它也可以完全通过Java配置( @EnableJms, JmsListenerContainerFactory)来配置架构。也可以使用 JmsListenerConfigurer注解来注册监听端点。
Spring 4.1还调整了JMS的支持，使得你可以从spring-messaging在Spring4.0引入的抽象获益，即：
消息监听端点可以有更为灵活的签名，并且可以从标准的消息注解获益，例如@Payload、@Header、@Headers和@SendTo注解。另外，也可以使用一个标准的消息，以代替javax.jms.Message作为方法参数。
一个新的可用 JmsMessageOperations接口和允许操作使用Message抽象的JmsTemplate。
最后，Spring 4.1提供了其他各种各样的改进：
JmsTemplate中的同步请求-答复操作支持
监听器的优先权可以指定每个<jms:listener/>元素
消息侦听器容器恢复选项可以通过使用 BackOff 实现进行配置
JMS 2.0消费者支持共享
4.2 Caching改进
Spring 4.1 支持JCache (JSR-107)注解使用Spring的现有缓存配置和基础结构的抽象；使用标准注解不需要任何更改。
Spring 4.1也极大地提高了自己的缓存抽象:
在运行时使用CacheResolver解决缓存，不在强制使用value参数定义缓存名称。
更多的自定义作业层：缓存解析器、缓存管理器、key生成器。
新的类级别的注解@CacheConfig，允许在类级别上共享常用配置，不需要启用任何缓存操作。
使用CacheErrorHandler更好的处理缓存方法的异常。
Spring 4.1为了在CacheInterface添加一个新的putIfAbsent方法也做了重大的更改。
4.3 Web改进
通过新的抽象类 ResourceResolver, ResourceTransformer, 和 ResourceUrlProvider 扩展了基于 ResourceHttpRequestHandler 对资源处理的支持。一些内置的实现提供资源URL版本控制（有效的HTTP缓存），定位gzip压缩的资源，生成一个HTML5 AppCache清单，以及更多的支持。参见第21.16.9，“服务资源”。
@RequestParam, @RequestHeader, and @MatrixVariable 支持Java 1.8 的java.util.Optional。
返回ListenableFuture类型的底层服务（又或者AsyncRestTemplate的调用）支持用ListenableFuture 替换DeferredResult 作为返回值。
@ModelAttribute 方法可以在循环依赖的顺序中调用。参见 SPR-6299.
Jackson的 @JsonView 可以直接使用在 @ResponseBody 和 ResponseEntity controller的方法上，序列化同一个POJO对象，返回不同数量的细节（例如概要与详细信息页面）。支持基于视图的渲染通过添加序列化视图类型作为model属性下的特殊的key的方法。详情参见：Jackson Serialization View Support章节。
支持Jackson JSONP。详情参见：Jackson JSONP Support章节
一个新的可用的生命周期选项拦截在@ResponseBody 和 ResponseEntity 作用的方法在return之后和response返回之前。在实现ResponseBodyAdvice的Bean上声明@ControllerAdvice。@JsonView 和JSONP利用这个实现的。详情参见：Intercepting requests with a HandlerInterceptor章节。
三种新的HttpMessageConverter 选项：
Gson ―较Jackson更轻量级。已经被用在了Spring Android。
Google Protocol Buffers? ― 在一个企业里面，服务间行之有效的通信数据协议，亦可以公开为JSON和XML的浏览器。
通过对jackson-dataformat-xml扩展支持基于XML序列化的Jackson。如果jackson-dataformat-xml在classpath中，在使用 @EnableWebMvc 或者 <mvc:annotation-driven/>的时候，将默认使用这个替代JAXB2。
可以通过名称建立Controller 和 View 比如 JSP的联系。默认的名称是每个@RequestMapping，比如FooController 有个handleFoo 方法，命名为“FC#handleFoo”。命名策略是可插拔的。另外，也可以通过其名称属性明确命名一个@RequestMapping。在Spring JSP标签库中的一个新的mvcUrl功能使这个容易在JSP页面中使用。参见第21.7.2章，“Building URIs to Controllers and methods from views”。
ResponseEntity 提供了一个建造者风格的API，用来指导Controller的method对服务端响应的准备,例如ResponseEntity.ok()。
RequestEntity是一种新类型,它提供了一个构建式API来引导客户端代码对HTTP请求的准备。
MVC Java配置和XML名称空间:
视图解析器现支持配置 content negotiation,参见21.16.8”视图解析器”。
视图控制器有内置了重定向和设置response状态码的支持。一个应用可以使用这个配置重定向url，返回的404页面，发送“无内容”的响应，等等。这里列出一些用例。
内置了自定义path matching功能。详见 第 21.16.11 章， “Path Matching”。
Groovy支持(基于Groovy 2.3)标记模板。见GroovyMarkupConfigurer 和 各自的 ViewResolver 以及 `View'的实现类。
4.4 WebSocket Messaging 改进
SockJS (Java)的客户端支持。见SockJsClient 和同一个包的其他类。
STOMP客户订阅和退订时新的应用程序上下文事件SessionSubscribeEvent 和 SessionUnsubscribeEvent 被发布。
新的“websocket”作用域，见第 25.4.14章“WebSocket Scope”。
@SendToUser 可以把单个session和不需要身份验证的用户作为目标。
@MessageMapping 可以使用“.”代替“/”作为分隔符。见SPR-11660。
STOMP/ WebSocket监测信息被收集和记录。见第25.4.16章 “Runtime Monitoring”。
显著优化和改进的记录应保持非常可读的和紧凑的甚至在调试水平。
优化信息创建包括支持临时消息可变性和避免自动消息id和时间戳的创建。见 MessageHeaderAccessor的Javadoc。
关闭WebSocket会话建立后60秒内没有活动的STOMP/WebSocket连接。见SPR-11884。
4.5 Testing 改进
现在可以用于配置Groovy脚本加载ApplicationContext的集成测试和TestContext框架。
详见：“Context configuration with Groovy scripts”。
Test-managed事务现在可以通过编程的方式开始和结束事务通过新的TestTransaction API测试方法。
详见：“Programmatic transaction management”。
SQL脚本执行现在可以通过新的@Sql和以声明的方式配置@SqlConfig注释在每个类、每个方法的基础上。
详见：14.5.7章 “Executing SQL scripts”。
通过新的 @TestPropertySource 注解配置property sources 。
详见：“Context configuration with test property sources”。
现在可以自动发现默认的TestExecutionListeners。
详见： “Automatic discovery of default TestExecutionListeners”。
自定义的TestExecutionListeners 可以和默认的listener自动合并。
详见： “Merging TestExecutionListeners” 。
TestContext框架中事物测试的文档已得到改进。增加了更多的全面的解释和和例子。
详见：14.5.6章，“Transaction management”。
MockServletContext, MockHttpServletRequest, 和 其他 Servlet API mock的全方面的改进。
AssertThrows 已被重构，支持 Throwable ，替代了原来的Exception。
在 Spring MVC Test,JSON响应可以用 JSON Assert断言， JSONPath 作为一个额外的选项可以被使用。就像使用XMLUtil断言XML。
MockMvcBuilder 可以在 MockMvcConfigurer帮助下创建。他的增加使得Spring Security设置更容易应用，但可以用来封装常见设置任何第三方框架或在一个项目中。
MockRestServiceServer 现在支持 AsyncRestTemplate 客户端测试。
5、Spring 4.2增强和新功能
5.1 核心容器的改进
注解@Bean可以在Java8的默认方法上被检测和处理，允许使用@Bean在默认的方法上组合配置类。
配置类现在可以通过声明@Import引入常规的组件类，允许混合引入配置类和组件类。
配置类现在可以声明@Order的值，使其能按预期的顺序来处理, 比如(通过名字来覆盖Bean配置等)。
@Resource注解的元素, 现在可以配合@Lazy, 和@Autowired一样, 注入代理类, 来代理对应bean的请求。
application event那套现在提供了注解支持，以及发布任意事件的能力。
被管理的类中的任何一个使用@EventListener 注解的public方法，都可以消费事件。
@TransactionalEventListener提供交易绑定的事件支持。
Spring4.2引入了对注解属性别名的完美支持。新@AliasFor注释可用于声明一对别名属性在一个注释中或在自定义的注解中声明一个属性的别名是元注解的一个属性。
下面的这些注解为了使value属性的别名更有可读性，使用 @AliasFor 进行了重写。@Cacheable, @CacheEvict, @CachePut, @ComponentScan, @ComponentScan.Filter, @ImportResource, @Scope, @ManagedResource, @Header, @Payload, @SendToUser, @ActiveProfiles, @ContextConfiguration, @Sql, @TestExecutionListeners, @TestPropertySource, @Transactional, @ControllerAdvice, @CookieValue, @CrossOrigin, @MatrixVariable, @RequestHeader, @RequestMapping, @RequestParam, @RequestPart, @ResponseStatus, @SessionAttributes, @ActionMapping, @RenderMapping, @EventListener, @TransactionalEventListener。
比如，spring-test 模块中的 @ContextConfiguration 现在的声明如下：
public @interface ContextConfiguration {

    @AliasFor("locations")
    String[] value() default {};

    @AliasFor("value")
    String[] locations() default {};

    // ...
}
同样，使用@AliasFor在组合注解的属性上，声明别名是元注解的一个属性。
例如：
@ContextConfiguration
public @interface MyTestConfig {

    @AliasFor(annotation = ContextConfiguration.class, attribute = "value")
    String[] xmlFiles();

    // ...
}
见 Spring Annotation Programming Model 。
Spring在搜索元注解的算法上进行了提升，比如局部声明的注解比继承的注解更受到青睐。
Map类型的的注解属性（和AnnotationAttributes 实例）可以被合成（即转换）到一个注解。
基于field的数据绑定（DirectFieldAccessor）功能已经和基于property的数据绑定（BeanWrapper）想符合。尤其是基于field的数据绑定现在支持Collection、 Array 和 Map 的导航。
DefaultConversionService 为Stream, Charset, Currency, 和 TimeZone 提供了开箱即用的转换器。这种转换器可以单独添加任意ConversionService。
如果'javax.money'API在classpath中，DefaultFormattingConversionService提供了对JSR-354 Money & Currency 值类型的支持，也就是：MonetaryAmount 和 CurrencyUnit。包含了对@NumberFormat应用的支持。
@NumberFormat 现在可以作为元注解使用。
JavaMailSenderImpl 新增了testConnection() 方法，测试和服务器的连通性。
ScheduledTaskRegistrar 公开计划任务。
支持Apache commons-pool2 作为AOP CommonsPool2TargetSource池。
引入StandardScriptFactory作为基于JSR-223的机制脚本化bean，开放XML中的lang:std节点。支持JavaScript和JRuby等。（注意：JRubyScriptFactory 和 lang:jruby 现在被废弃了。建议使用JSR-223。）
5.2 数据访问的提升
通过AspectJ支持javax.transaction.Transactional。
SimpleJdbcCallOperations 支持名称绑定。
完全支持Hibernate ORM 5.0：通过它原生的API（被新的 org.springframework.orm.hibernate5 包覆盖）作为JPA的提供者（自动适配）。
嵌入式数据库现在可以自动分配独特的名字，并且<jdbc:embedded-database>支持新的database-name 属性。请参见下面的“Testing Improvements”为进一步的细节。
5.3 JMS改进
通过JmsListenerContainerFactory控制autoStartup属性。
每个监听容器都可以配置Destination应答的类型。
@SendTo 的 value 可以用 SpEL表达式。
使用JmsResponse在运行时计算响应的目标。
在同一个方法上，可是使用重复@JmsListener声明多个JMS 容器。（如果没有使用Java8，仍使用最新引入的@JmsListeners）
5.4 Web 改进
支持 HTTP Streaming 和  Server-Sent Events（服务器推送事件），详见“HTTP Streaming”章节。
支持包含全局（MVC Java config and XML namespace）和本地（@CrossOrigin）配置的CORS（跨域资源共享）。详见第26章 CORS Support细节。
HTTP 缓存更新：
ResponseEntity, WebContentGenerator, ResourceHttpRequestHandler插入了新的CacheControl的builder。
提升了对WebRequest中ETag/Last-Modified 的支持。
使用 @RequestMapping作为元注解，自定义映射注解。
AbstractHandlerMethodMapping 的public方法在运行时完成请求映射的注册和移除注册。
AbstractDispatcherServletInitializer 的protected createDispatcherServlet方法，进一步定制化DispatcherServlet 实例。
HandlerMethod 作为 @ExceptionHandler注解的方法参数,特别是方便了@ControllerAdvice组件。
java.util.concurrent.CompletableFuture作为一个@Controller 方法的返回值类型。
HttpHeaders 为了保存静态资源支持byte-range请求。
nested exceptions能检测到@ResponseStatus 。
UriTemplateHandler 作为 RestTemplate 的扩展点。
DefaultUriTemplateHandler 开放了 baseUrl 的 property 和 path segment 编码选项。
扩展点也可以用来插入任何URI模板库。
RestTemplate集成了OkHttp。
MvcUriComponentsBuilder中的方法可以选择自定义的baseUrl。
序列化/反序列化的异常信息调整到WARN级别日志。
默认的JSON前缀从“{} &&”调整到更安全的“)]}', ”。
新的RequestBodyAdvice 扩展点和内置的实现都支持Jackson的@JsonView 在@ResponseBody方法的参数上注解。
当使用 GSON 或者 Jackson 2.6+的时候，处理方法返回的类型用于提高参数化类型的序列化，例如 List<Foo>。
引入ScriptTemplateView作为基于JSR-223的机制，与Nashorn (JDK 8)中聚焦于JavaScript 视图的模板，脚本化web视图。
5.5 WebSocket Messaging 改进
公开已连接用户和订阅服务的状态信息：
新的SimpUserRegistry作为名称是“userRegistry”的bean被公开。
服务器集群共享状态信息。详见broker relay 配置选项。
服务器集群解决用户目标。详见broker relay 配置选项。
StompSubProtocolErrorHandler 对客户端STOMP ERROR 框架的定制和控制进行了扩展。
@ControllerAdvice 组件可以使用全局的@MessageExceptionHandler 方法。
SimpleBrokerMessageHandler 为订阅服务增加了心跳机制和一个SpEL表达式“selector”的header。
基于 TCP 和 WebSocket上使用STOMP客户端。详见 25.4.13 章，“STOMP Client”。
@SendTo 和 @SendToUser 可以包含目标变量的占位符。
@MessageMapping 和 @SubscribeMapping的返回值支持使用 Jackson的@JsonView。
ListenableFuture 和 CompletableFuture 作为@MessageMapping 和 @SubscribeMapping的返回值类型。
MarshallingMessageConverter 处理 XML payload。
5.6 Testing 改进
基于JUnit集成测试现在可以使用JUnit规则替代SpringJUnit4ClassRunner执行。这允许基于spring的集成测试可以和其他的runner，比如 JUnit的Parameterized 或者第三方的runner，比如MockitoJUnitRunner一起运行。
见“Spring JUnit Rules”章节的细节。
Spring MVC Test框架完美了支撑了HtmlUnit，包括集成Selenium的WebDriver ，允许测试基于页面的web应用，而不需要部署到Servlet容器。
见14.6.2“HtmlUnit Integration”章节的细节。
AopTestUtils 是一个新的测试工具。可以让开发人员获得隐藏在一个或多个Spring代理下面的目标对象的引用。
见13.2.1, “General testing utilities”章节的细节。
ReflectionTestUtils支持 getting 和 setting static filed，包括构造器。
保留了@ActiveProfiles 声明bend定义的顺序的配置，为了支持根据激活的profile的名称加载配置文件的测试用例，比如Spring Boot的 ConfigFileApplicationListener。
@DirtiesContext 支持在测试结束之前使用 BEFORE_METHOD, BEFORE_CLASS 和 BEFORE_EACH_TEST_METHOD 这些方法关闭 ApplicationContext 。比如一些破坏性（即，有待决定的）测试在一个大的测试集，已经破坏了ApplicationContext的原始配置。
一个新的注解@Commit ，也许可以代替@Rollback(false)。
@Rollback可以配置默认的类级别语义。
因此，@TransactionConfiguration 被废弃，将会在接下来的版本中移除。
@Sql现在支持通过一个新的statements属性执行内联SQL语句。
用于在测试用例中缓存ApplicationContexts 的缓存ContextCache，现在是一个public API 和一个默认的实现，这个实现是可以被用户缓存需求所取代的。
DefaultTestContext, DefaultBootstrapContext 和 DefaultCacheAwareContextLoaderDelegate 现在是support 子包中的public class，允许自定义扩展。
TestContextBootstrappers 现在负责构造TestContext。
在Spring MVC Test框架，MvcResult的细节，可以被记录为DEBUG级别或者输出到自定义的OutputStream 或Writer。详见MockMvcResultHandlers中新的方法 log()、print(OutputStream) 和 print(Writer)。
JDBC XML 命名空间 <jdbc:embedded-database> 支持新的 database-name 属性。允许开发人员为嵌入式数据库设置唯一的名称。例如：通过SpEL表达式或占位符属性所影响的当前活动bean定义配置文件。
嵌入式数据库，可以被自动分配一个唯一的名称。允许在一个测试集合中复用通用测试数据库配置在不同的ApplicationContext。
详见18.8.6, “Generating unique names for embedded databases” 。